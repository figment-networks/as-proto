import * as assert from 'assert';
import { CodeGeneratorRequest, CodeGeneratorResponse } from 'google-protobuf/google/protobuf/compiler/plugin_pb';
import { FileDescriptorProto } from 'google-protobuf/google/protobuf/descriptor_pb';
import prettier from 'prettier';

import { FileContext } from '../file-context';
import { generateEnum } from './enum';
import { GeneratorContext } from '../generator-context';
import { generateMessage } from './message';


export function processFile(fileDescriptor: FileDescriptorProto, fileContext: FileContext): string {
  const filename = fileDescriptor.getName();
  assert.ok(filename);

  const filePackage = fileDescriptor.getPackage();

  const types: string[] = [];
  for (const messageDescriptor of fileDescriptor.getMessageTypeList()) {
    types.push(generateMessage(messageDescriptor, fileContext));
  }
  for (const enumDescriptor of fileDescriptor.getEnumTypeList()) {
    types.push(generateEnum(enumDescriptor, fileContext));
  }

  return `${fileContext.getImportsCode()}\n\n${types.join("\n\n")}`;
}

export function addFile(filename: string, code: string, codeGenResponse: CodeGeneratorResponse, protoc_version: string): void {
  let formattedCode =`
  // Code generated by protoc-gen-as. DO NOT EDIT.
  // versions:
  // 	 protoc-gen-as v0.2.3
  // 	 protoc        v${protoc_version}
  // source: ${filename}` + "\n\n" + code;

  try {
    formattedCode = prettier.format(code, { parser: "typescript" });
  } catch (error) {
    console.error(error);
  }

  const outputFile = new CodeGeneratorResponse.File();
  outputFile.setName(filename);
  outputFile.setContent(formattedCode);
  codeGenResponse.addFile(outputFile);
}

export function generateExport(codeGenRequest: CodeGeneratorRequest, generatorContext: GeneratorContext) {
  for (const fileName of codeGenRequest.getFileToGenerateList()) {
    const fileDescriptor = generatorContext.getFileDescriptorByFileName(fileName);
    assert.ok(fileDescriptor);

  }
}
